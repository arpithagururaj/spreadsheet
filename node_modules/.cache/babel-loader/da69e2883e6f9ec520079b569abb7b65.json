{"ast":null,"code":"var _jsxFileName = \"/home/adityam/GRSSL/front-end/excel/spreadsheet/src/App.js\";\nimport React from \"react\";\nimport { Data } from \"./data\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExcelToJson extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.readUploadFile = e => {\n      e.preventDefault();\n\n      if (e.target.files) {\n        const reader = new FileReader();\n\n        reader.onload = e => {\n          const data = e.target.result;\n          const workbook = xlsx.read(data, {\n            type: \"array\"\n          });\n          const sheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[sheetName];\n          const json = xlsx.utils.sheet_to_json(worksheet);\n          console.log(json);\n        };\n\n        reader.readAsArrayBuffer(e.target.files[0]);\n      }\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      file: \"\",\n      dataInFile: []\n    };\n  }\n\n  handleClick(e) {\n    this.refs.fileUploader.click();\n  }\n\n  filePathset(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    var file = e.target.files[0];\n    console.log(file);\n    this.setState({\n      file\n    });\n    console.log(this.state.file);\n  }\n\n  readFile() {\n    var f = this.state.file;\n    var name = f.name;\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      // evt = on_file_select event\n\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      console.log(\"Data>>>\" + data); // shows that excel data is read\n\n      console.log(this.convertToJson(data)); // shows data in json format\n\n      this.setState({\n        dataInFile: this.convertToJson(data)\n      });\n    };\n\n    reader.readAsBinaryString(f);\n  }\n\n  convertToJson(csv) {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n\n    var stingJson = JSON.stringify(result); //JSON\n\n    return JSON.parse(stingJson);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        ref: \"fileUploader\",\n        onChange: readUploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.readFile();\n        },\n        children: \"Read File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), JSON.stringify(this.state.dataInFile), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        class: \"table table-striped\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"age\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ExcelToJson; // export default function App(){\n//   const[ExcelData,setExcelData]=useState('')\n//  function handleFile(e){\n//    let selectFile = ExcelData;\n//    if(selectFile){\n//      alert('selectFile.type')\n//     console.log(selectFile.type)\n//    }else{\n//      console.log('please select your file')\n//    }\n//    setExcelData(selectFile.type)\n//  } \n//   return(\n//     <>\n//     <h1>hiiii</h1>\n//     <div className=\"container\">\n//       <div className=\"form\">\n//         <form className=\"form-group\" autoComplete=\"off\">\n//           <label><h5>Upload file</h5></label>\n//           <br></br>\n//           <input type='file' className=\"form-control\" onChange={(e) => setExcelData(e.target.files[0])}  required></input>\n//           <button type=\"submit\" className=\"btn btn-success\"\n//           style={{marginTop:5+\"px\"}} onClick={(e) => handleFile(e)}>submit</button>\n//         </form>\n//       </div>\n//       <br></br>\n//       <hr></hr>\n//       <h5>view excel file</h5>\n//       <div className=\"viewer\">\n//         {ExcelData==null&&<>no file selected</>}\n//         {ExcelData==null&&(\n//           <div className=\"table-responsive\">\n//             <table className=\"table\">\n//             <thead>\n//               <tr>\n//                 <th scope=\"col\">Id</th>\n//                 <th scope=\"col\">name</th>\n//                 <th scope=\"col\">age</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               <Data ExelData={ExcelData}/>\n//             </tbody>\n//             </table>\n//             </div>\n//         )}\n//       </div>\n//     </div>\n//     </>\n//   )\n// }","map":{"version":3,"sources":["/home/adityam/GRSSL/front-end/excel/spreadsheet/src/App.js"],"names":["React","Data","XLSX","ExcelToJson","Component","constructor","props","readUploadFile","e","preventDefault","target","files","reader","FileReader","onload","data","result","workbook","xlsx","read","type","sheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","console","log","readAsArrayBuffer","handleClick","bind","state","file","dataInFile","refs","fileUploader","click","filePathset","stopPropagation","setState","readFile","f","name","evt","bstr","wb","wsname","ws","sheet_to_csv","header","convertToJson","readAsBinaryString","csv","lines","split","headers","i","length","obj","currentline","j","push","stingJson","JSON","stringify","parse","render"],"mappings":"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","sourcesContent":["import React  from \"react\";\n\n\n import { Data } from \"./data\";\n\n import * as XLSX from \"xlsx\";\n\nclass ExcelToJson extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      file: \"\",\n      dataInFile:[]\n    };\n  }\n\n  handleClick(e) {\n    this.refs.fileUploader.click();\n  }\n\n  filePathset(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    var file = e.target.files[0];\n    console.log(file);\n    this.setState({ file });\n\n    console.log(this.state.file);\n  }\n\n  readFile() {\n    var f = this.state.file;\n    var name = f.name;\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      // evt = on_file_select event\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      /* Update state */\n      console.log(\"Data>>>\" + data);// shows that excel data is read\n      console.log(this.convertToJson(data)); // shows data in json format\n      this.setState({\n        dataInFile: this.convertToJson(data)\n      })\n    };\n    reader.readAsBinaryString(f);\n  }\n\n  convertToJson(csv) {\n    var lines = csv.split(\"\\n\");\n\n    var result = [];\n\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n\n    var stingJson = JSON.stringify(result); //JSON\n    return JSON.parse(stingJson)\n  }\n\n   readUploadFile = (e) => {\n    e.preventDefault();\n    if (e.target.files) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = xlsx.read(data, { type: \"array\" });\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            const json = xlsx.utils.sheet_to_json(worksheet);\n            console.log(json);\n        };\n        reader.readAsArrayBuffer(e.target.files[0]);\n    }\n}\n\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"file\"\n          id=\"file\"\n          ref=\"fileUploader\"\n          onChange={readUploadFile}\n        />\n        <button\n          onClick={() => {\n            this.readFile();\n          }}\n        >\n          Read File\n        </button>\n        {JSON.stringify(this.state.dataInFile )}\n\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <table class=\"table table-striped\">\n                <thead>\n                    <tr>\n                    <th>id</th>\n                    <th>Name</th>\n                    <th>age</th>\n                    </tr>\n                </thead>\n                <tbody>\n                 \n        {/* {this.state.dataInFile[1]} */}\n                    \n                {/* {this.state.dataInFile.map( info =>\n                 (\n                  <tr>\n                  <td>{info.id}</td>\n                  <td>{info.name}</td>\n                  <td>{info.age}</td>\n                  </tr>\n                 )\n                )}                     */}\n                </tbody>\n            </table>\n      </div>\n    );\n  }\n}\n\nexport default ExcelToJson;\n\n// export default function App(){\n//   const[ExcelData,setExcelData]=useState('')\n\n//  function handleFile(e){\n\n//    let selectFile = ExcelData;\n//    if(selectFile){\n//      alert('selectFile.type')\n//     console.log(selectFile.type)\n//    }else{\n//      console.log('please select your file')\n     \n\n//    }\n//    setExcelData(selectFile.type)\n//  } \n \n\n//   return(\n//     <>\n//     <h1>hiiii</h1>\n//     <div className=\"container\">\n//       <div className=\"form\">\n//         <form className=\"form-group\" autoComplete=\"off\">\n//           <label><h5>Upload file</h5></label>\n//           <br></br>\n//           <input type='file' className=\"form-control\" onChange={(e) => setExcelData(e.target.files[0])}  required></input>\n\n//           <button type=\"submit\" className=\"btn btn-success\"\n//           style={{marginTop:5+\"px\"}} onClick={(e) => handleFile(e)}>submit</button>\n//         </form>\n//       </div>\n\n//       <br></br>\n//       <hr></hr>\n//       <h5>view excel file</h5>\n//       <div className=\"viewer\">\n//         {ExcelData==null&&<>no file selected</>}\n//         {ExcelData==null&&(\n//           <div className=\"table-responsive\">\n//             <table className=\"table\">\n//             <thead>\n//               <tr>\n//                 <th scope=\"col\">Id</th>\n//                 <th scope=\"col\">name</th>\n//                 <th scope=\"col\">age</th>\n                \n\n\n\n//               </tr>\n\n\n//             </thead>\n//             <tbody>\n//               <Data ExelData={ExcelData}/>\n\n//             </tbody>\n\n//             </table>\n//             </div>\n//         )}\n//       </div>\n//     </div>\n//     </>\n//   )\n// }\n "]},"metadata":{},"sourceType":"module"}